generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Program {
  id           Int       @id @default(autoincrement())
  programName  String
  programType  String
  totalCourses Int
  courses      Course[]
  sessions     Session[]
  students     Student[]
}

model Student {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String           @unique
  enrollmentYear Int
  status         String           @default("active")
  programId      Int
  records        AcademicRecord[]
  enrollments    Enrollment[]
  program        Program          @relation(fields: [programId], references: [id])
  transfers      Transfer[]

  @@index([programId], map: "Student_programId_fkey")
}

model Course {
  id              Int              @id @default(autoincrement())
  courseCode      String           @unique
  courseName      String
  credits         Int              @default(3)
  isTransferable  Boolean          @default(true)
  maxCapacity     Int?
  programId       Int
  records         AcademicRecord[]
  program         Program          @relation(fields: [programId], references: [id])
  offerings       CourseOffering[]
  prerequisites   Prerequisite[]   @relation("PrerequisitesForCourse")
  prerequisiteFor Prerequisite[]   @relation("PrerequisitesForOther")
  transfers       Transfer[]

  @@index([programId], map: "Course_programId_fkey")
}

model Prerequisite {
  id                   Int    @id @default(autoincrement())
  courseId             Int
  prerequisiteCourseId Int
  course               Course @relation("PrerequisitesForCourse", fields: [courseId], references: [id])
  prerequisiteCourse   Course @relation("PrerequisitesForOther", fields: [prerequisiteCourseId], references: [id])

  @@index([courseId], map: "Prerequisite_courseId_fkey")
  @@index([prerequisiteCourseId], map: "Prerequisite_prerequisiteCourseId_fkey")
}

model Session {
  id          Int              @id @default(autoincrement())
  sessionName String
  startDate   DateTime
  endDate     DateTime
  programId   Int
  records     AcademicRecord[]
  offerings   CourseOffering[]
  program     Program          @relation(fields: [programId], references: [id])

  @@index([programId], map: "Session_programId_fkey")
}

model CourseOffering {
  id          Int          @id @default(autoincrement())
  courseId    Int
  sessionId   Int
  maxStudents Int?
  course      Course       @relation(fields: [courseId], references: [id])
  session     Session      @relation(fields: [sessionId], references: [id])
  enrollments Enrollment[]

  @@index([courseId], map: "CourseOffering_courseId_fkey")
  @@index([sessionId], map: "CourseOffering_sessionId_fkey")
}

model Enrollment {
  id         Int            @id @default(autoincrement())
  studentId  Int
  offeringId Int
  status     String         @default("enrolled")
  grade      String?
  offering   CourseOffering @relation(fields: [offeringId], references: [id])
  student    Student        @relation(fields: [studentId], references: [id])

  @@index([offeringId], map: "Enrollment_offeringId_fkey")
  @@index([studentId], map: "Enrollment_studentId_fkey")
}

model Transfer {
  id           Int       @id @default(autoincrement())
  studentId    Int
  courseId     Int
  transferType String?
  approvalDate DateTime?
  course       Course    @relation(fields: [courseId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id])

  @@index([courseId], map: "Transfer_courseId_fkey")
  @@index([studentId], map: "Transfer_studentId_fkey")
}

model AcademicRecord {
  id        Int     @id @default(autoincrement())
  studentId Int
  courseId  Int
  sessionId Int
  status    String?
  grade     String?
  course    Course  @relation(fields: [courseId], references: [id])
  session   Session @relation(fields: [sessionId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@index([courseId], map: "AcademicRecord_courseId_fkey")
  @@index([sessionId], map: "AcademicRecord_sessionId_fkey")
  @@index([studentId], map: "AcademicRecord_studentId_fkey")
}
