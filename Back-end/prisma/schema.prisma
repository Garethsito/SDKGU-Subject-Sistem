generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Program {
  id           Int      @id @default(autoincrement())
  programName  String   @unique
  programType  String
  totalCourses Int
  students     Student[]
  sessions     Session[]
  courses      Course[]
}

model Student {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?  @unique
  rgmKey         String?  @unique  // Nuevo campo para RGM KEY
  startDate      DateTime
  admissionDate  DateTime? // Para las fechas de "Admission date"
  enrollmentYear Int
  status         String   @default("active")
  program        Program  @relation(fields: [programId], references: [id])
  programId      Int
  enrollments    Enrollment[]
  transfers      Transfer[]
  records        AcademicRecord[]
  payments       Payment[]  // Nuevo: para registrar pagos
  
  @@unique([firstName, lastName, startDate])
  @@index([programId])
  @@index([lastName])
  @@index([rgmKey])
}

model Course {
  id             Int      @id @default(autoincrement())
  courseCode     String   @unique
  courseName     String
  credits        Int      @default(3)
  isTransferable Boolean  @default(true)
  maxCapacity    Int?
  program        Program  @relation(fields: [programId], references: [id])
  programId      Int
  prerequisites      Prerequisite[] @relation("PrerequisitesForCourse")
  prerequisiteFor    Prerequisite[] @relation("PrerequisitesForOther")
  offerings          CourseOffering[]
  records            AcademicRecord[]
  transfers          Transfer[]
  
  @@index([programId])
  @@index([courseCode])
}

model Prerequisite {
  id                   Int     @id @default(autoincrement())
  course               Course  @relation("PrerequisitesForCourse", fields: [courseId], references: [id])
  courseId             Int
  prerequisiteCourse   Course  @relation("PrerequisitesForOther", fields: [prerequisiteCourseId], references: [id])
  prerequisiteCourseId Int
  
  @@unique([courseId, prerequisiteCourseId])
  @@index([courseId])
  @@index([prerequisiteCourseId])
}

model Session {
  id          Int      @id @default(autoincrement())
  sessionName String   @unique // "S1 2025", "S7 2025", etc.
  startDate   DateTime
  endDate     DateTime
  program     Program  @relation(fields: [programId], references: [id])
  programId   Int
  offerings   CourseOffering[]
  records     AcademicRecord[]
  
  @@index([programId])
  @@index([sessionName])
}

model CourseOffering {
  id          Int      @id @default(autoincrement())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  session     Session  @relation(fields: [sessionId], references: [id])
  sessionId   Int
  maxStudents Int?
  enrollments Enrollment[]
  
  @@unique([courseId, sessionId])
  @@index([courseId])
  @@index([sessionId])
}

model Enrollment {
  id         Int             @id @default(autoincrement())
  student    Student         @relation(fields: [studentId], references: [id])
  studentId  Int
  offering   CourseOffering  @relation(fields: [offeringId], references: [id])
  offeringId Int
  status     String          @default("enrolled")
  grade      String?
  
  @@unique([studentId, offeringId])
  @@index([studentId])
  @@index([offeringId])
}

model Transfer {
  id           Int       @id @default(autoincrement())
  student      Student   @relation(fields: [studentId], references: [id])
  studentId    Int
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     Int
  transferType String?
  approvalDate DateTime?
  
  @@index([studentId])
  @@index([courseId])
}

model AcademicRecord {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  status    String?  // 'completed', 'in-progress', 'pending', 'scheduled', 'failed', 'loa', 'R' (repeat)
  grade     String?  // A, A-, B+, "S1 2025", "LOA", "F S5 R", etc.
  isPayment Boolean  @default(false) // Para distinguir registros de pago
  paymentInfo String? // Informaci√≥n del pago si isPayment = true
  
  @@unique([studentId, courseId, sessionId])
  @@index([studentId])
  @@index([courseId])
  @@index([sessionId])
}

// Nuevo modelo para pagos
model Payment {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  amount      String   // "$300", "$440", etc.
  paymentDate DateTime?
  method      String?  // "Bank", "Paypal", "PP", etc.
  description String?
  courseCode  String?  // Para asociar con un curso si aplica
  
  @@index([studentId])
}

model Login {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
}